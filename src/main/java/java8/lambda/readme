好了，通过上述的几个例子，大家差不多也能明白了lambda是用来干什么以及好处了。
显而易见的，好处就是代码量大大减少了！程序逻辑也很清晰明了。
它的用处浅显来说就是替代“内部匿名类”、可以对集合或者数组进行循环操作。

以前：
面向对象式编程就应该纯粹的面向对象，于是经常看到这样的写法：
如果你想写一个方法，那么就必须把它放到一个类里面，然后new出来对象，对象调用这个方法。
匿名类型最大的问题就在于其冗余的语法。
有人戏称匿名类型导致了“高度问题”（height problem）：


因此JAVA8中就提供了这种“函数式编程”的方法 —— lambda表达式，供我们来更加简明扼要的实现内部匿名类的功能。

先说一个名词的概念

函数式接口：Functional Interface.
定义的一个接口，接口里面必须 有且只有一个抽象方法 ，这样的接口就成为函数式接口。
在可以使用lambda表达式的地方，方法声明时必须包含一个函数式的接口。
（JAVA8的接口可以有多个default方法）

任何函数式接口都可以使用lambda表达式替换。
例如：ActionListener、Comparator、Runnable

lambda表达式只能出现在目标类型为函数式接口的上下文中。

注意：
此处是只能！！！
意味着如果我们提供的这个接口包含一个以上的Abstract Method，那么使用lambda表达式则会报错。
这点已经验证过了。

场景：
这种场景其实很常见：
你在某处就真的只需要一个能做一件事情的函数而已，连它叫什么名字都无关紧要。
Lambda 表达式就可以用来做这件事。

基本语法:
(parameters) -> expression 或 (parameters) ->{ statements; }
即: 参数 -> 带返回值的表达式/无返回值的陈述

//1. 接收2个int型整数,返回他们的和
(int x, int y) -> x + y;

//2. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)
(String s) -> System.out.print(s);
